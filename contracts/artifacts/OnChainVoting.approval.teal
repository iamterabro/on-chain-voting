#pragma version 11
intcblock 1 0 32
bytecblock 0x6f7074696f6e73 0x766f74657273 0x7374617274 0x656e64 0x 0x0000000000000000

// This TEAL was generated by TEALScript v0.106.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64,uint64,string)void
*abi_route_createApplication:
	// proposal: string
	txna ApplicationArgs 3
	extract 2 0

	// end: uint64
	txna ApplicationArgs 2
	btoi

	// start: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64,string)void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(start: uint64, end: uint64, proposal: string): void
createApplication:
	proto 3 0

	// contracts/OnChainVoting.algo.ts:37
	// assert(start < end)
	frame_dig -1 // start: uint64
	frame_dig -2 // end: uint64
	<
	assert

	// contracts/OnChainVoting.algo.ts:38
	// assert(globals.latestTimestamp < start)
	global LatestTimestamp
	frame_dig -1 // start: uint64
	<
	assert

	// contracts/OnChainVoting.algo.ts:40
	// this.votingStart.value = start
	bytec 2 //  "start"
	frame_dig -1 // start: uint64
	app_global_put

	// contracts/OnChainVoting.algo.ts:41
	// this.votingEnd.value = end
	bytec 3 //  "end"
	frame_dig -2 // end: uint64
	app_global_put

	// contracts/OnChainVoting.algo.ts:42
	// this.proposal.value = proposal
	pushbytes 0x70726f706f73616c // "proposal"
	frame_dig -3 // proposal: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

// addOption(uint64,string)void
*abi_route_addOption:
	// description: string
	txna ApplicationArgs 2
	extract 2 0

	// option: uint64
	txna ApplicationArgs 1
	btoi

	// execute addOption(uint64,string)void
	callsub addOption
	intc 0 // 1
	return

// addOption(option: VoteOptionId, description: string): void
addOption:
	proto 2 0

	// contracts/OnChainVoting.algo.ts:46
	// assert(this.canEdit())
	callsub canEdit
	assert

	// contracts/OnChainVoting.algo.ts:47
	// assert(!this.options(option).exists)
	bytec 0 //  "options"
	frame_dig -1 // option: VoteOptionId
	itob
	concat
	box_len
	swap
	pop
	!
	assert

	// contracts/OnChainVoting.algo.ts:49
	// this.options(option).value = {
	//       description: description,
	//       votes: 0,
	//     }
	bytec 0 //  "options"
	frame_dig -1 // option: VoteOptionId
	itob
	concat
	dup
	box_del
	pop
	bytec 4 //  initial head
	bytec 4 //  initial tail
	pushbytes 0x000a // initial head offset
	bytec 5 // 0x0000000000000000
	callsub *process_static_tuple_element
	frame_dig -2 // description: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	box_put
	retsub

// removeOption(uint64)void
*abi_route_removeOption:
	// option: uint64
	txna ApplicationArgs 1
	btoi

	// execute removeOption(uint64)void
	callsub removeOption
	intc 0 // 1
	return

// removeOption(option: VoteOptionId): void
removeOption:
	proto 1 0

	// contracts/OnChainVoting.algo.ts:56
	// assert(this.canEdit())
	callsub canEdit
	assert

	// contracts/OnChainVoting.algo.ts:57
	// assert(this.options(option).exists)
	bytec 0 //  "options"
	frame_dig -1 // option: VoteOptionId
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts/OnChainVoting.algo.ts:59
	// this.options(option).delete()
	bytec 0 //  "options"
	frame_dig -1 // option: VoteOptionId
	itob
	concat
	box_del
	retsub

// removeVoterStorage(address,uint64)void
*abi_route_removeVoterStorage:
	// votingPower: uint64
	txna ApplicationArgs 2
	btoi

	// voterAddress: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (voterAddress) for removeVoterStorage must be a address
	assert

	// execute removeVoterStorage(address,uint64)void
	callsub removeVoterStorage
	intc 0 // 1
	return

// removeVoterStorage(voterAddress: Address, votingPower: uint64): void
removeVoterStorage:
	proto 2 0

	// contracts/OnChainVoting.algo.ts:64
	// assert(globals.latestTimestamp > this.votingEnd.value)
	global LatestTimestamp
	bytec 3 //  "end"
	app_global_get
	>
	assert

	// contracts/OnChainVoting.algo.ts:65
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts/OnChainVoting.algo.ts:67
	// this.voters({ address: voterAddress, votingPower: votingPower }).delete()
	bytec 1 //  "voters"
	frame_dig -1 // voterAddress: Address
	frame_dig -2 // votingPower: uint64
	itob
	concat
	concat
	box_del
	retsub

// vote(uint64,uint64)void
*abi_route_vote:
	// choice: uint64
	txna ApplicationArgs 2
	btoi

	// votingPower: uint64
	txna ApplicationArgs 1
	btoi

	// execute vote(uint64,uint64)void
	callsub vote
	intc 0 // 1
	return

// vote(votingPower: uint64, choice: VoteOptionId): void
vote:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 4 // 0x

	// contracts/OnChainVoting.algo.ts:71
	// voterAddress: Address = this.txn.sender
	txn Sender
	frame_bury 0 // voterAddress: Address

	// contracts/OnChainVoting.algo.ts:73
	// assert(this.votingStart.value < globals.latestTimestamp)
	bytec 2 //  "start"
	app_global_get
	global LatestTimestamp
	<
	assert

	// contracts/OnChainVoting.algo.ts:74
	// assert(this.votingEnd.value > globals.latestTimestamp)
	bytec 3 //  "end"
	app_global_get
	global LatestTimestamp
	>
	assert

	// contracts/OnChainVoting.algo.ts:75
	// assert(this.voters({ address: voterAddress, votingPower: votingPower }).exists)
	bytec 1 //  "voters"
	frame_dig 0 // voterAddress: Address
	frame_dig -1 // votingPower: uint64
	itob
	concat
	concat
	box_len
	swap
	pop
	assert

	// contracts/OnChainVoting.algo.ts:76
	// assert(this.voters({ address: voterAddress, votingPower: votingPower }).value === HAS_NOT_VOTED)
	bytec 1 //  "voters"
	frame_dig 0 // voterAddress: Address
	frame_dig -1 // votingPower: uint64
	itob
	concat
	concat
	box_get

	// box value does not exist: this.voters({ address: voterAddress, votingPower: votingPower }).value
	assert
	btoi
	intc 1 // 0
	==
	assert

	// contracts/OnChainVoting.algo.ts:77
	// assert(this.options(choice).exists)
	bytec 0 //  "options"
	frame_dig -2 // choice: VoteOptionId
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts/OnChainVoting.algo.ts:80
	// this.options(choice).value.votes += votingPower
	bytec 0 //  "options"
	frame_dig -2 // choice: VoteOptionId
	itob
	concat
	box_get

	// box value does not exist: this.options(choice).value
	assert
	store 255 // full array
	load 255 // full array
	intc 1 // 0
	bytec 0 //  "options"
	frame_dig -2 // choice: VoteOptionId
	itob
	concat
	box_get

	// box value does not exist: this.options(choice).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_dig -1 // votingPower: uint64
	+
	itob
	replace3
	bytec 0 //  "options"
	frame_dig -2 // choice: VoteOptionId
	itob
	concat
	dup
	box_del
	pop
	swap
	box_put

	// contracts/OnChainVoting.algo.ts:83
	// this.voters({ address: voterAddress, votingPower: votingPower }).value = HAS_VOTED
	bytec 1 //  "voters"
	frame_dig 0 // voterAddress: Address
	frame_dig -1 // votingPower: uint64
	itob
	concat
	concat
	pushbytes 0x0000000000000001
	box_put
	retsub

// addVoter(address,uint64)void
*abi_route_addVoter:
	// votingPower: uint64
	txna ApplicationArgs 2
	btoi

	// voterAddress: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (voterAddress) for addVoter must be a address
	assert

	// execute addVoter(address,uint64)void
	callsub addVoter
	intc 0 // 1
	return

// addVoter(voterAddress: Address, votingPower: uint64): void
addVoter:
	proto 2 0

	// contracts/OnChainVoting.algo.ts:87
	// assert(this.canEdit())
	callsub canEdit
	assert

	// contracts/OnChainVoting.algo.ts:88
	// assert(!this.voters({ address: voterAddress, votingPower: votingPower }).exists)
	bytec 1 //  "voters"
	frame_dig -1 // voterAddress: Address
	frame_dig -2 // votingPower: uint64
	itob
	concat
	concat
	box_len
	swap
	pop
	!
	assert

	// contracts/OnChainVoting.algo.ts:90
	// this.voters({ address: voterAddress, votingPower: votingPower }).value = HAS_NOT_VOTED
	bytec 1 //  "voters"
	frame_dig -1 // voterAddress: Address
	frame_dig -2 // votingPower: uint64
	itob
	concat
	concat
	bytec 5 // 0x0000000000000000
	box_put

	// contracts/OnChainVoting.algo.ts:91
	// assert(this.voters({ address: voterAddress, votingPower: votingPower }).exists)
	bytec 1 //  "voters"
	frame_dig -1 // voterAddress: Address
	frame_dig -2 // votingPower: uint64
	itob
	concat
	concat
	box_len
	swap
	pop
	assert

	// contracts/OnChainVoting.algo.ts:92
	// assert(this.voters({ address: voterAddress, votingPower: votingPower }).value === HAS_NOT_VOTED)
	bytec 1 //  "voters"
	frame_dig -1 // voterAddress: Address
	frame_dig -2 // votingPower: uint64
	itob
	concat
	concat
	box_get

	// box value does not exist: this.voters({ address: voterAddress, votingPower: votingPower }).value
	assert
	btoi
	intc 1 // 0
	==
	assert
	retsub

// updateTimes(uint64,uint64)void
*abi_route_updateTimes:
	// end: uint64
	txna ApplicationArgs 2
	btoi

	// start: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateTimes(uint64,uint64)void
	callsub updateTimes
	intc 0 // 1
	return

// updateTimes(start: uint64, end: uint64): void
updateTimes:
	proto 2 0

	// contracts/OnChainVoting.algo.ts:96
	// assert(this.canEdit())
	callsub canEdit
	assert

	// contracts/OnChainVoting.algo.ts:97
	// assert(start < end)
	frame_dig -1 // start: uint64
	frame_dig -2 // end: uint64
	<
	assert

	// contracts/OnChainVoting.algo.ts:98
	// assert(start < this.votingEnd.value)
	frame_dig -1 // start: uint64
	bytec 3 //  "end"
	app_global_get
	<
	assert

	// contracts/OnChainVoting.algo.ts:99
	// assert(end > this.votingStart.value)
	frame_dig -2 // end: uint64
	bytec 2 //  "start"
	app_global_get
	>
	assert

	// contracts/OnChainVoting.algo.ts:101
	// this.votingStart.value = start
	bytec 2 //  "start"
	frame_dig -1 // start: uint64
	app_global_put

	// contracts/OnChainVoting.algo.ts:102
	// this.votingEnd.value = end
	bytec 3 //  "end"
	frame_dig -2 // end: uint64
	app_global_put
	retsub

// canEdit()bool
*abi_route_canEdit:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// execute canEdit()bool
	callsub canEdit
	pushbytes 0x00
	intc 1 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// canEdit(): boolean
canEdit:
	proto 0 1

	// contracts/OnChainVoting.algo.ts:106
	// return globals.latestTimestamp < this.votingStart.value && this.txn.sender === globals.creatorAddress;
	global LatestTimestamp
	bytec 2 //  "start"
	app_global_get
	<
	dup
	bz *skip_and0
	txn Sender
	global CreatorAddress
	==
	&&

*skip_and0:
	retsub

// withdraw(uint64)void
*abi_route_withdraw:
	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute withdraw(uint64)void
	callsub withdraw
	intc 0 // 1
	return

// withdraw(amount: uint64): void
withdraw:
	proto 1 0

	// contracts/OnChainVoting.algo.ts:110
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/OnChainVoting.algo.ts:112
	// sendPayment({
	//       receiver: this.app.creator,
	//       amount: amount,
	//       fee: 0,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/OnChainVoting.algo.ts:113
	// receiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field Receiver

	// contracts/OnChainVoting.algo.ts:114
	// amount: amount
	frame_dig -1 // amount: uint64
	itxn_field Amount

	// contracts/OnChainVoting.algo.ts:115
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	pushbytes 0xc3836715 // method "createApplication(uint64,uint64,string)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xa0b3ea5a // method "addOption(uint64,string)void"
	pushbytes 0x8b3c2043 // method "removeOption(uint64)void"
	pushbytes 0x77c7be67 // method "removeVoterStorage(address,uint64)void"
	pushbytes 0xa278a8b6 // method "vote(uint64,uint64)void"
	pushbytes 0xb52f8ecd // method "addVoter(address,uint64)void"
	pushbytes 0xe55da16a // method "updateTimes(uint64,uint64)void"
	pushbytes 0xaec3e246 // method "canEdit()bool"
	pushbytes 0x21f1ddff // method "withdraw(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_addOption *abi_route_removeOption *abi_route_removeVoterStorage *abi_route_vote *abi_route_addVoter *abi_route_updateTimes *abi_route_canEdit *abi_route_withdraw

	// this contract does not implement the given ABI method for call NoOp
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub