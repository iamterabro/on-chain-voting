{
  "hints": {
    "createApplication(uint64,uint64,string)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "addOption(uint64,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeOption(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeVoterStorage(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "vote(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addVoter(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateTimes(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "canEdit()bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "votingStart": {
          "type": "uint64",
          "key": "start"
        },
        "votingEnd": {
          "type": "uint64",
          "key": "end"
        },
        "proposal": {
          "type": "bytes",
          "key": "proposal"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "OnChainVoting",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "start",
            "type": "uint64"
          },
          {
            "name": "end",
            "type": "uint64"
          },
          {
            "name": "proposal",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addOption",
        "args": [
          {
            "name": "option",
            "type": "uint64"
          },
          {
            "name": "description",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeOption",
        "args": [
          {
            "name": "option",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeVoterStorage",
        "args": [
          {
            "name": "voterAddress",
            "type": "address"
          },
          {
            "name": "votingPower",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "vote",
        "args": [
          {
            "name": "votingPower",
            "type": "uint64"
          },
          {
            "name": "choice",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addVoter",
        "args": [
          {
            "name": "voterAddress",
            "type": "address"
          },
          {
            "name": "votingPower",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateTimes",
        "args": [
          {
            "name": "start",
            "type": "uint64"
          },
          {
            "name": "end",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "canEdit",
        "args": [],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "withdraw",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}