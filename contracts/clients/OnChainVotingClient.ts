/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"OnChainVoting","desc":"","methods":[{"name":"createApplication","args":[{"name":"start","type":"uint64"},{"name":"end","type":"uint64"},{"name":"proposal","type":"string"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"addOption","args":[{"name":"option","type":"uint64"},{"name":"description","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"removeOption","args":[{"name":"option","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"removeVoterStorage","args":[{"name":"voterAddress","type":"address"},{"name":"votingPower","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"vote","args":[{"name":"votingPower","type":"uint64"},{"name":"choice","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"addVoter","args":[{"name":"voterAddress","type":"address"},{"name":"votingPower","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateTimes","args":[{"name":"start","type":"uint64"},{"name":"end","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"canEdit","args":[],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}},{"name":"withdraw","args":[{"name":"amount","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"VoterKey":[{"name":"address","type":"address"},{"name":"votingPower","type":"uint64"}],"OptionDetails":[{"name":"votes","type":"uint64"},{"name":"description","type":"string"}]},"state":{"schema":{"global":{"bytes":1,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"votingStart":{"key":"c3RhcnQ=","keyType":"AVMBytes","valueType":"uint64"},"votingEnd":{"key":"ZW5k","keyType":"AVMBytes","valueType":"uint64"},"proposal":{"key":"cHJvcG9zYWw=","keyType":"AVMBytes","valueType":"string"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"voters":{"keyType":"VoterKey","valueType":"uint64","prefix":"voters"},"options":{"keyType":"uint64","valueType":"OptionDetails","prefix":"options"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/OnChainVoting.algo.ts:18","pc":[0]},{"teal":2,"source":"contracts/OnChainVoting.algo.ts:18","pc":[1,2,3,4,5]},{"teal":3,"source":"contracts/OnChainVoting.algo.ts:18","pc":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]},{"teal":15,"source":"contracts/OnChainVoting.algo.ts:18","pc":[43,44]},{"teal":16,"source":"contracts/OnChainVoting.algo.ts:18","pc":[45]},{"teal":17,"source":"contracts/OnChainVoting.algo.ts:18","pc":[46,47]},{"teal":18,"source":"contracts/OnChainVoting.algo.ts:18","pc":[48]},{"teal":19,"source":"contracts/OnChainVoting.algo.ts:18","pc":[49,50]},{"teal":20,"source":"contracts/OnChainVoting.algo.ts:18","pc":[51]},{"teal":21,"source":"contracts/OnChainVoting.algo.ts:18","pc":[52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77]},{"teal":25,"source":"contracts/OnChainVoting.algo.ts:18","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[78]},{"teal":30,"source":"contracts/OnChainVoting.algo.ts:36","pc":[79,80,81]},{"teal":31,"source":"contracts/OnChainVoting.algo.ts:36","pc":[82,83,84]},{"teal":34,"source":"contracts/OnChainVoting.algo.ts:36","pc":[85,86,87]},{"teal":35,"source":"contracts/OnChainVoting.algo.ts:36","pc":[88]},{"teal":38,"source":"contracts/OnChainVoting.algo.ts:36","pc":[89,90,91]},{"teal":39,"source":"contracts/OnChainVoting.algo.ts:36","pc":[92]},{"teal":42,"source":"contracts/OnChainVoting.algo.ts:36","pc":[93,94,95]},{"teal":43,"source":"contracts/OnChainVoting.algo.ts:36","pc":[96]},{"teal":44,"source":"contracts/OnChainVoting.algo.ts:36","pc":[97]},{"teal":48,"source":"contracts/OnChainVoting.algo.ts:36","pc":[98,99,100]},{"teal":52,"source":"contracts/OnChainVoting.algo.ts:37","pc":[101,102]},{"teal":53,"source":"contracts/OnChainVoting.algo.ts:37","pc":[103,104]},{"teal":54,"source":"contracts/OnChainVoting.algo.ts:37","pc":[105]},{"teal":55,"source":"contracts/OnChainVoting.algo.ts:37","pc":[106]},{"teal":59,"source":"contracts/OnChainVoting.algo.ts:38","pc":[107,108]},{"teal":60,"source":"contracts/OnChainVoting.algo.ts:38","pc":[109,110]},{"teal":61,"source":"contracts/OnChainVoting.algo.ts:38","pc":[111]},{"teal":62,"source":"contracts/OnChainVoting.algo.ts:38","pc":[112]},{"teal":66,"source":"contracts/OnChainVoting.algo.ts:40","pc":[113]},{"teal":67,"source":"contracts/OnChainVoting.algo.ts:40","pc":[114,115]},{"teal":68,"source":"contracts/OnChainVoting.algo.ts:40","pc":[116]},{"teal":72,"source":"contracts/OnChainVoting.algo.ts:41","pc":[117]},{"teal":73,"source":"contracts/OnChainVoting.algo.ts:41","pc":[118,119]},{"teal":74,"source":"contracts/OnChainVoting.algo.ts:41","pc":[120]},{"teal":78,"source":"contracts/OnChainVoting.algo.ts:42","pc":[121,122,123,124,125,126,127,128,129,130]},{"teal":79,"source":"contracts/OnChainVoting.algo.ts:42","pc":[131,132]},{"teal":80,"source":"contracts/OnChainVoting.algo.ts:42","pc":[133]},{"teal":81,"source":"contracts/OnChainVoting.algo.ts:42","pc":[134]},{"teal":82,"source":"contracts/OnChainVoting.algo.ts:42","pc":[135]},{"teal":83,"source":"contracts/OnChainVoting.algo.ts:42","pc":[136,137,138]},{"teal":84,"source":"contracts/OnChainVoting.algo.ts:42","pc":[139]},{"teal":85,"source":"contracts/OnChainVoting.algo.ts:42","pc":[140]},{"teal":86,"source":"contracts/OnChainVoting.algo.ts:42","pc":[141]},{"teal":87,"source":"contracts/OnChainVoting.algo.ts:36","pc":[142]},{"teal":92,"source":"contracts/OnChainVoting.algo.ts:45","pc":[143,144,145]},{"teal":93,"source":"contracts/OnChainVoting.algo.ts:45","pc":[146,147,148]},{"teal":96,"source":"contracts/OnChainVoting.algo.ts:45","pc":[149,150,151]},{"teal":97,"source":"contracts/OnChainVoting.algo.ts:45","pc":[152]},{"teal":100,"source":"contracts/OnChainVoting.algo.ts:45","pc":[153,154,155]},{"teal":101,"source":"contracts/OnChainVoting.algo.ts:45","pc":[156]},{"teal":102,"source":"contracts/OnChainVoting.algo.ts:45","pc":[157]},{"teal":106,"source":"contracts/OnChainVoting.algo.ts:45","pc":[158,159,160]},{"teal":110,"source":"contracts/OnChainVoting.algo.ts:46","pc":[161,162,163]},{"teal":111,"source":"contracts/OnChainVoting.algo.ts:46","pc":[164]},{"teal":115,"source":"contracts/OnChainVoting.algo.ts:47","pc":[165]},{"teal":116,"source":"contracts/OnChainVoting.algo.ts:47","pc":[166,167]},{"teal":117,"source":"contracts/OnChainVoting.algo.ts:47","pc":[168]},{"teal":118,"source":"contracts/OnChainVoting.algo.ts:47","pc":[169]},{"teal":119,"source":"contracts/OnChainVoting.algo.ts:47","pc":[170]},{"teal":120,"source":"contracts/OnChainVoting.algo.ts:47","pc":[171]},{"teal":121,"source":"contracts/OnChainVoting.algo.ts:47","pc":[172]},{"teal":122,"source":"contracts/OnChainVoting.algo.ts:47","pc":[173]},{"teal":123,"source":"contracts/OnChainVoting.algo.ts:47","pc":[174]},{"teal":130,"source":"contracts/OnChainVoting.algo.ts:49","pc":[175]},{"teal":131,"source":"contracts/OnChainVoting.algo.ts:49","pc":[176,177]},{"teal":132,"source":"contracts/OnChainVoting.algo.ts:49","pc":[178]},{"teal":133,"source":"contracts/OnChainVoting.algo.ts:49","pc":[179]},{"teal":134,"source":"contracts/OnChainVoting.algo.ts:49","pc":[180]},{"teal":135,"source":"contracts/OnChainVoting.algo.ts:49","pc":[181]},{"teal":136,"source":"contracts/OnChainVoting.algo.ts:49","pc":[182]},{"teal":137,"source":"contracts/OnChainVoting.algo.ts:49","pc":[183,184]},{"teal":138,"source":"contracts/OnChainVoting.algo.ts:49","pc":[185,186]},{"teal":139,"source":"contracts/OnChainVoting.algo.ts:49","pc":[187,188,189,190]},{"teal":140,"source":"contracts/OnChainVoting.algo.ts:51","pc":[191,192]},{"teal":141,"source":"contracts/OnChainVoting.algo.ts:51","pc":[193,194,195]},{"teal":142,"source":"contracts/OnChainVoting.algo.ts:50","pc":[196,197]},{"teal":143,"source":"contracts/OnChainVoting.algo.ts:50","pc":[198]},{"teal":144,"source":"contracts/OnChainVoting.algo.ts:50","pc":[199]},{"teal":145,"source":"contracts/OnChainVoting.algo.ts:50","pc":[200]},{"teal":146,"source":"contracts/OnChainVoting.algo.ts:50","pc":[201,202,203]},{"teal":147,"source":"contracts/OnChainVoting.algo.ts:50","pc":[204]},{"teal":148,"source":"contracts/OnChainVoting.algo.ts:50","pc":[205]},{"teal":149,"source":"contracts/OnChainVoting.algo.ts:50","pc":[206,207,208]},{"teal":150,"source":"contracts/OnChainVoting.algo.ts:49","pc":[209]},{"teal":151,"source":"contracts/OnChainVoting.algo.ts:49","pc":[210]},{"teal":152,"source":"contracts/OnChainVoting.algo.ts:49","pc":[211]},{"teal":153,"source":"contracts/OnChainVoting.algo.ts:45","pc":[212]},{"teal":158,"source":"contracts/OnChainVoting.algo.ts:55","pc":[213,214,215]},{"teal":159,"source":"contracts/OnChainVoting.algo.ts:55","pc":[216]},{"teal":162,"source":"contracts/OnChainVoting.algo.ts:55","pc":[217,218,219]},{"teal":163,"source":"contracts/OnChainVoting.algo.ts:55","pc":[220]},{"teal":164,"source":"contracts/OnChainVoting.algo.ts:55","pc":[221]},{"teal":168,"source":"contracts/OnChainVoting.algo.ts:55","pc":[222,223,224]},{"teal":172,"source":"contracts/OnChainVoting.algo.ts:56","pc":[225,226,227]},{"teal":173,"source":"contracts/OnChainVoting.algo.ts:56","pc":[228]},{"teal":177,"source":"contracts/OnChainVoting.algo.ts:57","pc":[229]},{"teal":178,"source":"contracts/OnChainVoting.algo.ts:57","pc":[230,231]},{"teal":179,"source":"contracts/OnChainVoting.algo.ts:57","pc":[232]},{"teal":180,"source":"contracts/OnChainVoting.algo.ts:57","pc":[233]},{"teal":181,"source":"contracts/OnChainVoting.algo.ts:57","pc":[234]},{"teal":182,"source":"contracts/OnChainVoting.algo.ts:57","pc":[235]},{"teal":183,"source":"contracts/OnChainVoting.algo.ts:57","pc":[236]},{"teal":184,"source":"contracts/OnChainVoting.algo.ts:57","pc":[237]},{"teal":188,"source":"contracts/OnChainVoting.algo.ts:59","pc":[238]},{"teal":189,"source":"contracts/OnChainVoting.algo.ts:59","pc":[239,240]},{"teal":190,"source":"contracts/OnChainVoting.algo.ts:59","pc":[241]},{"teal":191,"source":"contracts/OnChainVoting.algo.ts:59","pc":[242]},{"teal":192,"source":"contracts/OnChainVoting.algo.ts:59","pc":[243]},{"teal":193,"source":"contracts/OnChainVoting.algo.ts:55","pc":[244]},{"teal":198,"source":"contracts/OnChainVoting.algo.ts:63","pc":[245,246,247]},{"teal":199,"source":"contracts/OnChainVoting.algo.ts:63","pc":[248]},{"teal":202,"source":"contracts/OnChainVoting.algo.ts:63","pc":[249,250,251]},{"teal":203,"source":"contracts/OnChainVoting.algo.ts:63","pc":[252]},{"teal":204,"source":"contracts/OnChainVoting.algo.ts:63","pc":[253]},{"teal":205,"source":"contracts/OnChainVoting.algo.ts:63","pc":[254]},{"teal":206,"source":"contracts/OnChainVoting.algo.ts:63","pc":[255]},{"teal":209,"source":"contracts/OnChainVoting.algo.ts:63","errorMessage":"argument 1 (voterAddress) for removeVoterStorage must be a address","pc":[256]},{"teal":212,"source":"contracts/OnChainVoting.algo.ts:63","pc":[257,258,259]},{"teal":213,"source":"contracts/OnChainVoting.algo.ts:63","pc":[260]},{"teal":214,"source":"contracts/OnChainVoting.algo.ts:63","pc":[261]},{"teal":218,"source":"contracts/OnChainVoting.algo.ts:63","pc":[262,263,264]},{"teal":222,"source":"contracts/OnChainVoting.algo.ts:64","pc":[265,266]},{"teal":223,"source":"contracts/OnChainVoting.algo.ts:64","pc":[267]},{"teal":224,"source":"contracts/OnChainVoting.algo.ts:64","pc":[268]},{"teal":225,"source":"contracts/OnChainVoting.algo.ts:64","pc":[269]},{"teal":226,"source":"contracts/OnChainVoting.algo.ts:64","pc":[270]},{"teal":230,"source":"contracts/OnChainVoting.algo.ts:65","pc":[271,272]},{"teal":231,"source":"contracts/OnChainVoting.algo.ts:65","pc":[273,274]},{"teal":232,"source":"contracts/OnChainVoting.algo.ts:65","pc":[275]},{"teal":233,"source":"contracts/OnChainVoting.algo.ts:65","pc":[276]},{"teal":237,"source":"contracts/OnChainVoting.algo.ts:67","pc":[277]},{"teal":238,"source":"contracts/OnChainVoting.algo.ts:67","pc":[278,279]},{"teal":239,"source":"contracts/OnChainVoting.algo.ts:67","pc":[280,281]},{"teal":240,"source":"contracts/OnChainVoting.algo.ts:67","pc":[282]},{"teal":241,"source":"contracts/OnChainVoting.algo.ts:67","pc":[283]},{"teal":242,"source":"contracts/OnChainVoting.algo.ts:67","pc":[284]},{"teal":243,"source":"contracts/OnChainVoting.algo.ts:67","pc":[285]},{"teal":244,"source":"contracts/OnChainVoting.algo.ts:63","pc":[286]},{"teal":249,"source":"contracts/OnChainVoting.algo.ts:70","pc":[287,288,289]},{"teal":250,"source":"contracts/OnChainVoting.algo.ts:70","pc":[290]},{"teal":253,"source":"contracts/OnChainVoting.algo.ts:70","pc":[291,292,293]},{"teal":254,"source":"contracts/OnChainVoting.algo.ts:70","pc":[294]},{"teal":257,"source":"contracts/OnChainVoting.algo.ts:70","pc":[295,296,297]},{"teal":258,"source":"contracts/OnChainVoting.algo.ts:70","pc":[298]},{"teal":259,"source":"contracts/OnChainVoting.algo.ts:70","pc":[299]},{"teal":263,"source":"contracts/OnChainVoting.algo.ts:70","pc":[300,301,302]},{"teal":266,"source":"contracts/OnChainVoting.algo.ts:70","pc":[303,304]},{"teal":270,"source":"contracts/OnChainVoting.algo.ts:71","pc":[305,306]},{"teal":271,"source":"contracts/OnChainVoting.algo.ts:71","pc":[307,308]},{"teal":275,"source":"contracts/OnChainVoting.algo.ts:73","pc":[309]},{"teal":276,"source":"contracts/OnChainVoting.algo.ts:73","pc":[310]},{"teal":277,"source":"contracts/OnChainVoting.algo.ts:73","pc":[311,312]},{"teal":278,"source":"contracts/OnChainVoting.algo.ts:73","pc":[313]},{"teal":279,"source":"contracts/OnChainVoting.algo.ts:73","pc":[314]},{"teal":283,"source":"contracts/OnChainVoting.algo.ts:74","pc":[315]},{"teal":284,"source":"contracts/OnChainVoting.algo.ts:74","pc":[316]},{"teal":285,"source":"contracts/OnChainVoting.algo.ts:74","pc":[317,318]},{"teal":286,"source":"contracts/OnChainVoting.algo.ts:74","pc":[319]},{"teal":287,"source":"contracts/OnChainVoting.algo.ts:74","pc":[320]},{"teal":291,"source":"contracts/OnChainVoting.algo.ts:75","pc":[321]},{"teal":292,"source":"contracts/OnChainVoting.algo.ts:75","pc":[322,323]},{"teal":293,"source":"contracts/OnChainVoting.algo.ts:75","pc":[324,325]},{"teal":294,"source":"contracts/OnChainVoting.algo.ts:75","pc":[326]},{"teal":295,"source":"contracts/OnChainVoting.algo.ts:75","pc":[327]},{"teal":296,"source":"contracts/OnChainVoting.algo.ts:75","pc":[328]},{"teal":297,"source":"contracts/OnChainVoting.algo.ts:75","pc":[329]},{"teal":298,"source":"contracts/OnChainVoting.algo.ts:75","pc":[330]},{"teal":299,"source":"contracts/OnChainVoting.algo.ts:75","pc":[331]},{"teal":300,"source":"contracts/OnChainVoting.algo.ts:75","pc":[332]},{"teal":304,"source":"contracts/OnChainVoting.algo.ts:76","pc":[333]},{"teal":305,"source":"contracts/OnChainVoting.algo.ts:76","pc":[334,335]},{"teal":306,"source":"contracts/OnChainVoting.algo.ts:76","pc":[336,337]},{"teal":307,"source":"contracts/OnChainVoting.algo.ts:76","pc":[338]},{"teal":308,"source":"contracts/OnChainVoting.algo.ts:76","pc":[339]},{"teal":309,"source":"contracts/OnChainVoting.algo.ts:76","pc":[340]},{"teal":310,"source":"contracts/OnChainVoting.algo.ts:76","pc":[341]},{"teal":313,"source":"contracts/OnChainVoting.algo.ts:76","errorMessage":"box value does not exist: this.voters({ address: voterAddress, votingPower: votingPower }).value","pc":[342]},{"teal":314,"source":"contracts/OnChainVoting.algo.ts:76","pc":[343]},{"teal":315,"source":"contracts/OnChainVoting.algo.ts:16","pc":[344]},{"teal":316,"source":"contracts/OnChainVoting.algo.ts:76","pc":[345]},{"teal":317,"source":"contracts/OnChainVoting.algo.ts:76","pc":[346]},{"teal":321,"source":"contracts/OnChainVoting.algo.ts:77","pc":[347]},{"teal":322,"source":"contracts/OnChainVoting.algo.ts:77","pc":[348,349]},{"teal":323,"source":"contracts/OnChainVoting.algo.ts:77","pc":[350]},{"teal":324,"source":"contracts/OnChainVoting.algo.ts:77","pc":[351]},{"teal":325,"source":"contracts/OnChainVoting.algo.ts:77","pc":[352]},{"teal":326,"source":"contracts/OnChainVoting.algo.ts:77","pc":[353]},{"teal":327,"source":"contracts/OnChainVoting.algo.ts:77","pc":[354]},{"teal":328,"source":"contracts/OnChainVoting.algo.ts:77","pc":[355]},{"teal":332,"source":"contracts/OnChainVoting.algo.ts:80","pc":[356]},{"teal":333,"source":"contracts/OnChainVoting.algo.ts:80","pc":[357,358]},{"teal":334,"source":"contracts/OnChainVoting.algo.ts:80","pc":[359]},{"teal":335,"source":"contracts/OnChainVoting.algo.ts:80","pc":[360]},{"teal":336,"source":"contracts/OnChainVoting.algo.ts:80","pc":[361]},{"teal":339,"source":"contracts/OnChainVoting.algo.ts:80","errorMessage":"box value does not exist: this.options(choice).value","pc":[362]},{"teal":340,"source":"contracts/OnChainVoting.algo.ts:80","pc":[363,364]},{"teal":341,"source":"contracts/OnChainVoting.algo.ts:80","pc":[365,366]},{"teal":342,"source":"contracts/OnChainVoting.algo.ts:80","pc":[367]},{"teal":343,"source":"contracts/OnChainVoting.algo.ts:80","pc":[368]},{"teal":344,"source":"contracts/OnChainVoting.algo.ts:80","pc":[369,370]},{"teal":345,"source":"contracts/OnChainVoting.algo.ts:80","pc":[371]},{"teal":346,"source":"contracts/OnChainVoting.algo.ts:80","pc":[372]},{"teal":347,"source":"contracts/OnChainVoting.algo.ts:80","pc":[373]},{"teal":350,"source":"contracts/OnChainVoting.algo.ts:80","errorMessage":"box value does not exist: this.options(choice).value","pc":[374]},{"teal":351,"source":"contracts/OnChainVoting.algo.ts:80","pc":[375,376]},{"teal":352,"source":"contracts/OnChainVoting.algo.ts:80","pc":[377,378]},{"teal":353,"source":"contracts/OnChainVoting.algo.ts:80","pc":[379,380,381]},{"teal":354,"source":"contracts/OnChainVoting.algo.ts:80","pc":[382]},{"teal":355,"source":"contracts/OnChainVoting.algo.ts:80","pc":[383,384]},{"teal":356,"source":"contracts/OnChainVoting.algo.ts:80","pc":[385]},{"teal":357,"source":"contracts/OnChainVoting.algo.ts:80","pc":[386]},{"teal":358,"source":"contracts/OnChainVoting.algo.ts:80","pc":[387]},{"teal":359,"source":"contracts/OnChainVoting.algo.ts:80","pc":[388]},{"teal":360,"source":"contracts/OnChainVoting.algo.ts:80","pc":[389,390]},{"teal":361,"source":"contracts/OnChainVoting.algo.ts:80","pc":[391]},{"teal":362,"source":"contracts/OnChainVoting.algo.ts:80","pc":[392]},{"teal":363,"source":"contracts/OnChainVoting.algo.ts:80","pc":[393]},{"teal":364,"source":"contracts/OnChainVoting.algo.ts:80","pc":[394]},{"teal":365,"source":"contracts/OnChainVoting.algo.ts:80","pc":[395]},{"teal":366,"source":"contracts/OnChainVoting.algo.ts:80","pc":[396]},{"teal":367,"source":"contracts/OnChainVoting.algo.ts:80","pc":[397]},{"teal":371,"source":"contracts/OnChainVoting.algo.ts:83","pc":[398]},{"teal":372,"source":"contracts/OnChainVoting.algo.ts:83","pc":[399,400]},{"teal":373,"source":"contracts/OnChainVoting.algo.ts:83","pc":[401,402]},{"teal":374,"source":"contracts/OnChainVoting.algo.ts:83","pc":[403]},{"teal":375,"source":"contracts/OnChainVoting.algo.ts:83","pc":[404]},{"teal":376,"source":"contracts/OnChainVoting.algo.ts:83","pc":[405]},{"teal":377,"source":"contracts/OnChainVoting.algo.ts:83","pc":[406,407,408,409,410,411,412,413,414,415]},{"teal":378,"source":"contracts/OnChainVoting.algo.ts:83","pc":[416]},{"teal":379,"source":"contracts/OnChainVoting.algo.ts:70","pc":[417]},{"teal":384,"source":"contracts/OnChainVoting.algo.ts:86","pc":[418,419,420]},{"teal":385,"source":"contracts/OnChainVoting.algo.ts:86","pc":[421]},{"teal":388,"source":"contracts/OnChainVoting.algo.ts:86","pc":[422,423,424]},{"teal":389,"source":"contracts/OnChainVoting.algo.ts:86","pc":[425]},{"teal":390,"source":"contracts/OnChainVoting.algo.ts:86","pc":[426]},{"teal":391,"source":"contracts/OnChainVoting.algo.ts:86","pc":[427]},{"teal":392,"source":"contracts/OnChainVoting.algo.ts:86","pc":[428]},{"teal":395,"source":"contracts/OnChainVoting.algo.ts:86","errorMessage":"argument 1 (voterAddress) for addVoter must be a address","pc":[429]},{"teal":398,"source":"contracts/OnChainVoting.algo.ts:86","pc":[430,431,432]},{"teal":399,"source":"contracts/OnChainVoting.algo.ts:86","pc":[433]},{"teal":400,"source":"contracts/OnChainVoting.algo.ts:86","pc":[434]},{"teal":404,"source":"contracts/OnChainVoting.algo.ts:86","pc":[435,436,437]},{"teal":408,"source":"contracts/OnChainVoting.algo.ts:87","pc":[438,439,440]},{"teal":409,"source":"contracts/OnChainVoting.algo.ts:87","pc":[441]},{"teal":413,"source":"contracts/OnChainVoting.algo.ts:88","pc":[442]},{"teal":414,"source":"contracts/OnChainVoting.algo.ts:88","pc":[443,444]},{"teal":415,"source":"contracts/OnChainVoting.algo.ts:88","pc":[445,446]},{"teal":416,"source":"contracts/OnChainVoting.algo.ts:88","pc":[447]},{"teal":417,"source":"contracts/OnChainVoting.algo.ts:88","pc":[448]},{"teal":418,"source":"contracts/OnChainVoting.algo.ts:88","pc":[449]},{"teal":419,"source":"contracts/OnChainVoting.algo.ts:88","pc":[450]},{"teal":420,"source":"contracts/OnChainVoting.algo.ts:88","pc":[451]},{"teal":421,"source":"contracts/OnChainVoting.algo.ts:88","pc":[452]},{"teal":422,"source":"contracts/OnChainVoting.algo.ts:88","pc":[453]},{"teal":423,"source":"contracts/OnChainVoting.algo.ts:88","pc":[454]},{"teal":427,"source":"contracts/OnChainVoting.algo.ts:90","pc":[455]},{"teal":428,"source":"contracts/OnChainVoting.algo.ts:90","pc":[456,457]},{"teal":429,"source":"contracts/OnChainVoting.algo.ts:90","pc":[458,459]},{"teal":430,"source":"contracts/OnChainVoting.algo.ts:90","pc":[460]},{"teal":431,"source":"contracts/OnChainVoting.algo.ts:90","pc":[461]},{"teal":432,"source":"contracts/OnChainVoting.algo.ts:90","pc":[462]},{"teal":433,"source":"contracts/OnChainVoting.algo.ts:90","pc":[463,464]},{"teal":434,"source":"contracts/OnChainVoting.algo.ts:90","pc":[465]},{"teal":438,"source":"contracts/OnChainVoting.algo.ts:91","pc":[466]},{"teal":439,"source":"contracts/OnChainVoting.algo.ts:91","pc":[467,468]},{"teal":440,"source":"contracts/OnChainVoting.algo.ts:91","pc":[469,470]},{"teal":441,"source":"contracts/OnChainVoting.algo.ts:91","pc":[471]},{"teal":442,"source":"contracts/OnChainVoting.algo.ts:91","pc":[472]},{"teal":443,"source":"contracts/OnChainVoting.algo.ts:91","pc":[473]},{"teal":444,"source":"contracts/OnChainVoting.algo.ts:91","pc":[474]},{"teal":445,"source":"contracts/OnChainVoting.algo.ts:91","pc":[475]},{"teal":446,"source":"contracts/OnChainVoting.algo.ts:91","pc":[476]},{"teal":447,"source":"contracts/OnChainVoting.algo.ts:91","pc":[477]},{"teal":451,"source":"contracts/OnChainVoting.algo.ts:92","pc":[478]},{"teal":452,"source":"contracts/OnChainVoting.algo.ts:92","pc":[479,480]},{"teal":453,"source":"contracts/OnChainVoting.algo.ts:92","pc":[481,482]},{"teal":454,"source":"contracts/OnChainVoting.algo.ts:92","pc":[483]},{"teal":455,"source":"contracts/OnChainVoting.algo.ts:92","pc":[484]},{"teal":456,"source":"contracts/OnChainVoting.algo.ts:92","pc":[485]},{"teal":457,"source":"contracts/OnChainVoting.algo.ts:92","pc":[486]},{"teal":460,"source":"contracts/OnChainVoting.algo.ts:92","errorMessage":"box value does not exist: this.voters({ address: voterAddress, votingPower: votingPower }).value","pc":[487]},{"teal":461,"source":"contracts/OnChainVoting.algo.ts:92","pc":[488]},{"teal":462,"source":"contracts/OnChainVoting.algo.ts:16","pc":[489]},{"teal":463,"source":"contracts/OnChainVoting.algo.ts:92","pc":[490]},{"teal":464,"source":"contracts/OnChainVoting.algo.ts:92","pc":[491]},{"teal":465,"source":"contracts/OnChainVoting.algo.ts:86","pc":[492]},{"teal":470,"source":"contracts/OnChainVoting.algo.ts:95","pc":[493,494,495]},{"teal":471,"source":"contracts/OnChainVoting.algo.ts:95","pc":[496]},{"teal":474,"source":"contracts/OnChainVoting.algo.ts:95","pc":[497,498,499]},{"teal":475,"source":"contracts/OnChainVoting.algo.ts:95","pc":[500]},{"teal":478,"source":"contracts/OnChainVoting.algo.ts:95","pc":[501,502,503]},{"teal":479,"source":"contracts/OnChainVoting.algo.ts:95","pc":[504]},{"teal":480,"source":"contracts/OnChainVoting.algo.ts:95","pc":[505]},{"teal":484,"source":"contracts/OnChainVoting.algo.ts:95","pc":[506,507,508]},{"teal":488,"source":"contracts/OnChainVoting.algo.ts:96","pc":[509,510,511]},{"teal":489,"source":"contracts/OnChainVoting.algo.ts:96","pc":[512]},{"teal":493,"source":"contracts/OnChainVoting.algo.ts:97","pc":[513,514]},{"teal":494,"source":"contracts/OnChainVoting.algo.ts:97","pc":[515,516]},{"teal":495,"source":"contracts/OnChainVoting.algo.ts:97","pc":[517]},{"teal":496,"source":"contracts/OnChainVoting.algo.ts:97","pc":[518]},{"teal":500,"source":"contracts/OnChainVoting.algo.ts:98","pc":[519,520]},{"teal":501,"source":"contracts/OnChainVoting.algo.ts:98","pc":[521]},{"teal":502,"source":"contracts/OnChainVoting.algo.ts:98","pc":[522]},{"teal":503,"source":"contracts/OnChainVoting.algo.ts:98","pc":[523]},{"teal":504,"source":"contracts/OnChainVoting.algo.ts:98","pc":[524]},{"teal":508,"source":"contracts/OnChainVoting.algo.ts:99","pc":[525,526]},{"teal":509,"source":"contracts/OnChainVoting.algo.ts:99","pc":[527]},{"teal":510,"source":"contracts/OnChainVoting.algo.ts:99","pc":[528]},{"teal":511,"source":"contracts/OnChainVoting.algo.ts:99","pc":[529]},{"teal":512,"source":"contracts/OnChainVoting.algo.ts:99","pc":[530]},{"teal":516,"source":"contracts/OnChainVoting.algo.ts:101","pc":[531]},{"teal":517,"source":"contracts/OnChainVoting.algo.ts:101","pc":[532,533]},{"teal":518,"source":"contracts/OnChainVoting.algo.ts:101","pc":[534]},{"teal":522,"source":"contracts/OnChainVoting.algo.ts:102","pc":[535]},{"teal":523,"source":"contracts/OnChainVoting.algo.ts:102","pc":[536,537]},{"teal":524,"source":"contracts/OnChainVoting.algo.ts:102","pc":[538]},{"teal":525,"source":"contracts/OnChainVoting.algo.ts:95","pc":[539]},{"teal":530,"source":"contracts/OnChainVoting.algo.ts:105","pc":[540,541,542,543,544,545]},{"teal":533,"source":"contracts/OnChainVoting.algo.ts:105","pc":[546,547,548]},{"teal":534,"source":"contracts/OnChainVoting.algo.ts:105","pc":[549,550,551]},{"teal":535,"source":"contracts/OnChainVoting.algo.ts:105","pc":[552]},{"teal":536,"source":"contracts/OnChainVoting.algo.ts:105","pc":[553,554]},{"teal":537,"source":"contracts/OnChainVoting.algo.ts:105","pc":[555]},{"teal":538,"source":"contracts/OnChainVoting.algo.ts:105","pc":[556]},{"teal":539,"source":"contracts/OnChainVoting.algo.ts:105","pc":[557]},{"teal":540,"source":"contracts/OnChainVoting.algo.ts:105","pc":[558]},{"teal":541,"source":"contracts/OnChainVoting.algo.ts:105","pc":[559]},{"teal":545,"source":"contracts/OnChainVoting.algo.ts:105","pc":[560,561,562]},{"teal":549,"source":"contracts/OnChainVoting.algo.ts:106","pc":[563,564]},{"teal":550,"source":"contracts/OnChainVoting.algo.ts:106","pc":[565]},{"teal":551,"source":"contracts/OnChainVoting.algo.ts:106","pc":[566]},{"teal":552,"source":"contracts/OnChainVoting.algo.ts:106","pc":[567]},{"teal":553,"source":"contracts/OnChainVoting.algo.ts:106","pc":[568]},{"teal":554,"source":"contracts/OnChainVoting.algo.ts:106","pc":[569,570,571]},{"teal":555,"source":"contracts/OnChainVoting.algo.ts:106","pc":[572,573]},{"teal":556,"source":"contracts/OnChainVoting.algo.ts:106","pc":[574,575]},{"teal":557,"source":"contracts/OnChainVoting.algo.ts:106","pc":[576]},{"teal":558,"source":"contracts/OnChainVoting.algo.ts:106","pc":[577]},{"teal":561,"source":"contracts/OnChainVoting.algo.ts:105","pc":[578]},{"teal":566,"source":"contracts/OnChainVoting.algo.ts:109","pc":[579,580,581]},{"teal":567,"source":"contracts/OnChainVoting.algo.ts:109","pc":[582]},{"teal":570,"source":"contracts/OnChainVoting.algo.ts:109","pc":[583,584,585]},{"teal":571,"source":"contracts/OnChainVoting.algo.ts:109","pc":[586]},{"teal":572,"source":"contracts/OnChainVoting.algo.ts:109","pc":[587]},{"teal":576,"source":"contracts/OnChainVoting.algo.ts:109","pc":[588,589,590]},{"teal":580,"source":"contracts/OnChainVoting.algo.ts:110","pc":[591,592]},{"teal":581,"source":"contracts/OnChainVoting.algo.ts:110","pc":[593,594,595]},{"teal":582,"source":"contracts/OnChainVoting.algo.ts:110","pc":[596,597]},{"teal":583,"source":"contracts/OnChainVoting.algo.ts:110","pc":[598]},{"teal":584,"source":"contracts/OnChainVoting.algo.ts:110","pc":[599]},{"teal":585,"source":"contracts/OnChainVoting.algo.ts:110","pc":[600]},{"teal":593,"source":"contracts/OnChainVoting.algo.ts:112","pc":[601]},{"teal":594,"source":"contracts/OnChainVoting.algo.ts:112","pc":[602]},{"teal":595,"source":"contracts/OnChainVoting.algo.ts:112","pc":[603,604]},{"teal":599,"source":"contracts/OnChainVoting.algo.ts:113","pc":[605,606,607]},{"teal":600,"source":"contracts/OnChainVoting.algo.ts:113","pc":[608,609]},{"teal":601,"source":"contracts/OnChainVoting.algo.ts:113","pc":[610]},{"teal":602,"source":"contracts/OnChainVoting.algo.ts:113","pc":[611,612]},{"teal":606,"source":"contracts/OnChainVoting.algo.ts:114","pc":[613,614]},{"teal":607,"source":"contracts/OnChainVoting.algo.ts:114","pc":[615,616]},{"teal":611,"source":"contracts/OnChainVoting.algo.ts:115","pc":[617]},{"teal":612,"source":"contracts/OnChainVoting.algo.ts:115","pc":[618,619]},{"teal":615,"source":"contracts/OnChainVoting.algo.ts:112","pc":[620]},{"teal":616,"source":"contracts/OnChainVoting.algo.ts:109","pc":[621]},{"teal":619,"source":"contracts/OnChainVoting.algo.ts:18","pc":[622,623,624,625,626,627]},{"teal":620,"source":"contracts/OnChainVoting.algo.ts:18","pc":[628,629,630]},{"teal":621,"source":"contracts/OnChainVoting.algo.ts:18","pc":[631,632,633,634]},{"teal":624,"source":"contracts/OnChainVoting.algo.ts:18","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[635]},{"teal":627,"source":"contracts/OnChainVoting.algo.ts:18","pc":[636,637,638,639,640,641]},{"teal":628,"source":"contracts/OnChainVoting.algo.ts:18","pc":[642,643,644,645,646,647]},{"teal":629,"source":"contracts/OnChainVoting.algo.ts:18","pc":[648,649,650,651,652,653]},{"teal":630,"source":"contracts/OnChainVoting.algo.ts:18","pc":[654,655,656,657,658,659]},{"teal":631,"source":"contracts/OnChainVoting.algo.ts:18","pc":[660,661,662,663,664,665]},{"teal":632,"source":"contracts/OnChainVoting.algo.ts:18","pc":[666,667,668,669,670,671]},{"teal":633,"source":"contracts/OnChainVoting.algo.ts:18","pc":[672,673,674,675,676,677]},{"teal":634,"source":"contracts/OnChainVoting.algo.ts:18","pc":[678,679,680,681,682,683]},{"teal":635,"source":"contracts/OnChainVoting.algo.ts:18","pc":[684,685,686]},{"teal":636,"source":"contracts/OnChainVoting.algo.ts:18","pc":[687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704]},{"teal":639,"source":"contracts/OnChainVoting.algo.ts:18","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[705]},{"teal":642,"source":"contracts/OnChainVoting.algo.ts:18","pc":[706,707,708]},{"teal":643,"source":"contracts/OnChainVoting.algo.ts:18","pc":[709,710]},{"teal":644,"source":"contracts/OnChainVoting.algo.ts:18","pc":[711,712]},{"teal":645,"source":"contracts/OnChainVoting.algo.ts:18","pc":[713]},{"teal":646,"source":"contracts/OnChainVoting.algo.ts:18","pc":[714,715]},{"teal":647,"source":"contracts/OnChainVoting.algo.ts:18","pc":[716,717]},{"teal":648,"source":"contracts/OnChainVoting.algo.ts:18","pc":[718]},{"teal":651,"source":"contracts/OnChainVoting.algo.ts:18","pc":[719,720,721]},{"teal":652,"source":"contracts/OnChainVoting.algo.ts:18","pc":[722,723]},{"teal":653,"source":"contracts/OnChainVoting.algo.ts:18","pc":[724,725]},{"teal":654,"source":"contracts/OnChainVoting.algo.ts:18","pc":[726]},{"teal":655,"source":"contracts/OnChainVoting.algo.ts:18","pc":[727,728]},{"teal":656,"source":"contracts/OnChainVoting.algo.ts:18","pc":[729,730]},{"teal":657,"source":"contracts/OnChainVoting.algo.ts:18","pc":[731]},{"teal":658,"source":"contracts/OnChainVoting.algo.ts:18","pc":[732]},{"teal":659,"source":"contracts/OnChainVoting.algo.ts:18","pc":[733,734]},{"teal":660,"source":"contracts/OnChainVoting.algo.ts:18","pc":[735]},{"teal":661,"source":"contracts/OnChainVoting.algo.ts:18","pc":[736]},{"teal":662,"source":"contracts/OnChainVoting.algo.ts:18","pc":[737]},{"teal":663,"source":"contracts/OnChainVoting.algo.ts:18","pc":[738,739,740]},{"teal":664,"source":"contracts/OnChainVoting.algo.ts:18","pc":[741,742]},{"teal":665,"source":"contracts/OnChainVoting.algo.ts:18","pc":[743,744]},{"teal":666,"source":"contracts/OnChainVoting.algo.ts:18","pc":[745]},{"teal":667,"source":"contracts/OnChainVoting.algo.ts:18","pc":[746]},{"teal":668,"source":"contracts/OnChainVoting.algo.ts:18","pc":[747,748]},{"teal":669,"source":"contracts/OnChainVoting.algo.ts:18","pc":[749,750]},{"teal":670,"source":"contracts/OnChainVoting.algo.ts:18","pc":[751,752]},{"teal":671,"source":"contracts/OnChainVoting.algo.ts:18","pc":[753,754]},{"teal":672,"source":"contracts/OnChainVoting.algo.ts:18","pc":[755]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEx"},"byteCode":{"approval":"CyADAQAgJgYHb3B0aW9ucwZ2b3RlcnMFc3RhcnQDZW5kAAgAAAAAAAAAADEYFIEGCzEZCI0MAi4AAAAAAAAAAAAAAiAAAAAAAAAAAAAAADYaA1cCADYaAhc2GgEXiAACIkOKAwCL/4v+DEQyB4v/DEQqi/9nK4v+Z4AIcHJvcG9zYWyL/UkVFlcGAkxQZ4k2GgJXAgA2GgEXiAACIkOKAgCIAYxEKIv/FlC9TEgURCiL/xZQSbxIJwQnBIACAAonBYgB/ov+SRUWVwYCTFCIAf5IUL+JNhoBF4gAAiJDigEAiAFMRCiL/xZQvUxIRCiL/xZQvIk2GgIXNhoBSRUkEkSIAAIiQ4oCADIHK2QNRDEAMgkSRCmL/4v+FlBQvIk2GgIXNhoBF4gAAiJDigIAJwQxAIwAKmQyBwxEK2QyBw1EKYsAi/8WUFC9TEhEKYsAi/8WUFC+RBcjEkQoi/4WUL1MSEQoi/4WUL5ENf80/yMoi/4WUL5ENf80/1cACBeL/wgWXSiL/hZQSbxITL8piwCL/xZQUIAIAAAAAAAAAAG/iTYaAhc2GgFJFSQSRIgAAiJDigIAiAB3RCmL/4v+FlBQvUxIFEQpi/+L/hZQUCcFvymL/4v+FlBQvUxIRCmL/4v+FlBQvkQXIxJEiTYaAhc2GgEXiAACIkOKAgCIADBEi/+L/gxEi/8rZAxEi/4qZA1EKov/ZyuL/meJgAQVH3x1iAALgAEAI08CVFCwIkOKAAEyBypkDElBAAYxADIJEhCJNhoBF4gAAiJDigEAMQA2MgByB0gSRLEishA2MgByB0iyB4v/sggjsgGziYAEw4NnFTYaAI4B/dQAgASgs+pagASLPCBDgAR3x75ngASieKi2gAS1L47NgATlXaFqgASuw+JGgAQh8d3/NhoAjgj9zv4U/jT+Xv7h/yz/W/+CAIoEA4v8i/9Qi/2L/omKBAOL/Iv+UIz8i/9JFYv+FwgWVwYCjP6L/UxQjP2L/Iv9i/6J","clear":"Cw=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":1,"commitHash":"63d271cf"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type VoterKey = {
  address: string,
  votingPower: bigint
}


/**
 * Converts the ABI tuple representation of a VoterKey to the struct representation
 */
export function VoterKeyFromTuple(abiTuple: [string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.VoterKey, APP_SPEC.structs) as VoterKey
}

export type OptionDetails = {
  votes: bigint,
  description: string
}


/**
 * Converts the ABI tuple representation of a OptionDetails to the struct representation
 */
export function OptionDetailsFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.OptionDetails, APP_SPEC.structs) as OptionDetails
}

/**
 * The argument types for the OnChainVoting contract
 */
export type OnChainVotingArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64,uint64,string)void': {
      start: bigint | number
      end: bigint | number
      proposal: string
    }
    'addOption(uint64,string)void': {
      option: bigint | number
      description: string
    }
    'removeOption(uint64)void': {
      option: bigint | number
    }
    'removeVoterStorage(address,uint64)void': {
      voterAddress: string
      votingPower: bigint | number
    }
    'vote(uint64,uint64)void': {
      votingPower: bigint | number
      choice: bigint | number
    }
    'addVoter(address,uint64)void': {
      voterAddress: string
      votingPower: bigint | number
    }
    'updateTimes(uint64,uint64)void': {
      start: bigint | number
      end: bigint | number
    }
    'canEdit()bool': Record<string, never>
    'withdraw(uint64)void': {
      amount: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64,uint64,string)void': [start: bigint | number, end: bigint | number, proposal: string]
    'addOption(uint64,string)void': [option: bigint | number, description: string]
    'removeOption(uint64)void': [option: bigint | number]
    'removeVoterStorage(address,uint64)void': [voterAddress: string, votingPower: bigint | number]
    'vote(uint64,uint64)void': [votingPower: bigint | number, choice: bigint | number]
    'addVoter(address,uint64)void': [voterAddress: string, votingPower: bigint | number]
    'updateTimes(uint64,uint64)void': [start: bigint | number, end: bigint | number]
    'canEdit()bool': []
    'withdraw(uint64)void': [amount: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type OnChainVotingReturns = {
  'createApplication(uint64,uint64,string)void': void
  'addOption(uint64,string)void': void
  'removeOption(uint64)void': void
  'removeVoterStorage(address,uint64)void': void
  'vote(uint64,uint64)void': void
  'addVoter(address,uint64)void': void
  'updateTimes(uint64,uint64)void': void
  'canEdit()bool': boolean
  'withdraw(uint64)void': void
}

/**
 * Defines the types of available calls and state of the OnChainVoting smart contract.
 */
export type OnChainVotingTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,uint64,string)void' | 'createApplication', {
      argsObj: OnChainVotingArgs['obj']['createApplication(uint64,uint64,string)void']
      argsTuple: OnChainVotingArgs['tuple']['createApplication(uint64,uint64,string)void']
      returns: OnChainVotingReturns['createApplication(uint64,uint64,string)void']
    }>
    & Record<'addOption(uint64,string)void' | 'addOption', {
      argsObj: OnChainVotingArgs['obj']['addOption(uint64,string)void']
      argsTuple: OnChainVotingArgs['tuple']['addOption(uint64,string)void']
      returns: OnChainVotingReturns['addOption(uint64,string)void']
    }>
    & Record<'removeOption(uint64)void' | 'removeOption', {
      argsObj: OnChainVotingArgs['obj']['removeOption(uint64)void']
      argsTuple: OnChainVotingArgs['tuple']['removeOption(uint64)void']
      returns: OnChainVotingReturns['removeOption(uint64)void']
    }>
    & Record<'removeVoterStorage(address,uint64)void' | 'removeVoterStorage', {
      argsObj: OnChainVotingArgs['obj']['removeVoterStorage(address,uint64)void']
      argsTuple: OnChainVotingArgs['tuple']['removeVoterStorage(address,uint64)void']
      returns: OnChainVotingReturns['removeVoterStorage(address,uint64)void']
    }>
    & Record<'vote(uint64,uint64)void' | 'vote', {
      argsObj: OnChainVotingArgs['obj']['vote(uint64,uint64)void']
      argsTuple: OnChainVotingArgs['tuple']['vote(uint64,uint64)void']
      returns: OnChainVotingReturns['vote(uint64,uint64)void']
    }>
    & Record<'addVoter(address,uint64)void' | 'addVoter', {
      argsObj: OnChainVotingArgs['obj']['addVoter(address,uint64)void']
      argsTuple: OnChainVotingArgs['tuple']['addVoter(address,uint64)void']
      returns: OnChainVotingReturns['addVoter(address,uint64)void']
    }>
    & Record<'updateTimes(uint64,uint64)void' | 'updateTimes', {
      argsObj: OnChainVotingArgs['obj']['updateTimes(uint64,uint64)void']
      argsTuple: OnChainVotingArgs['tuple']['updateTimes(uint64,uint64)void']
      returns: OnChainVotingReturns['updateTimes(uint64,uint64)void']
    }>
    & Record<'canEdit()bool' | 'canEdit', {
      argsObj: OnChainVotingArgs['obj']['canEdit()bool']
      argsTuple: OnChainVotingArgs['tuple']['canEdit()bool']
      returns: OnChainVotingReturns['canEdit()bool']
    }>
    & Record<'withdraw(uint64)void' | 'withdraw', {
      argsObj: OnChainVotingArgs['obj']['withdraw(uint64)void']
      argsTuple: OnChainVotingArgs['tuple']['withdraw(uint64)void']
      returns: OnChainVotingReturns['withdraw(uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        votingStart: bigint
        votingEnd: bigint
        proposal: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        voters: Map<VoterKey, bigint>
        options: Map<bigint | number, OptionDetails>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type OnChainVotingSignatures = keyof OnChainVotingTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type OnChainVotingNonVoidMethodSignatures = keyof OnChainVotingTypes['methods'] extends infer T ? T extends keyof OnChainVotingTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the OnChainVoting smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends OnChainVotingSignatures> = OnChainVotingTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the OnChainVoting smart contract to the method's return type
 */
export type MethodReturn<TSignature extends OnChainVotingSignatures> = OnChainVotingTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = OnChainVotingTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = OnChainVotingTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type OnChainVotingCreateCallParams =
  | Expand<CallParams<OnChainVotingArgs['obj']['createApplication(uint64,uint64,string)void'] | OnChainVotingArgs['tuple']['createApplication(uint64,uint64,string)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<OnChainVotingArgs['obj']['createApplication(uint64,uint64,string)void'] | OnChainVotingArgs['tuple']['createApplication(uint64,uint64,string)void']> & {method: 'createApplication(uint64,uint64,string)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type OnChainVotingDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: OnChainVotingCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the OnChainVoting smart contract
 */
export abstract class OnChainVotingParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends OnChainVotingCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64,uint64,string)void':
            return OnChainVotingParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the OnChainVoting smart contract using the createApplication(uint64,uint64,string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<OnChainVotingArgs['obj']['createApplication(uint64,uint64,string)void'] | OnChainVotingArgs['tuple']['createApplication(uint64,uint64,string)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64,uint64,string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.start, params.args.end, params.args.proposal],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the addOption(uint64,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addOption(params: CallParams<OnChainVotingArgs['obj']['addOption(uint64,string)void'] | OnChainVotingArgs['tuple']['addOption(uint64,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addOption(uint64,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.option, params.args.description],
    }
  }
  /**
   * Constructs a no op call for the removeOption(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeOption(params: CallParams<OnChainVotingArgs['obj']['removeOption(uint64)void'] | OnChainVotingArgs['tuple']['removeOption(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeOption(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.option],
    }
  }
  /**
   * Constructs a no op call for the removeVoterStorage(address,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeVoterStorage(params: CallParams<OnChainVotingArgs['obj']['removeVoterStorage(address,uint64)void'] | OnChainVotingArgs['tuple']['removeVoterStorage(address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeVoterStorage(address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.voterAddress, params.args.votingPower],
    }
  }
  /**
   * Constructs a no op call for the vote(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static vote(params: CallParams<OnChainVotingArgs['obj']['vote(uint64,uint64)void'] | OnChainVotingArgs['tuple']['vote(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'vote(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.votingPower, params.args.choice],
    }
  }
  /**
   * Constructs a no op call for the addVoter(address,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addVoter(params: CallParams<OnChainVotingArgs['obj']['addVoter(address,uint64)void'] | OnChainVotingArgs['tuple']['addVoter(address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addVoter(address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.voterAddress, params.args.votingPower],
    }
  }
  /**
   * Constructs a no op call for the updateTimes(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateTimes(params: CallParams<OnChainVotingArgs['obj']['updateTimes(uint64,uint64)void'] | OnChainVotingArgs['tuple']['updateTimes(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateTimes(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.start, params.args.end],
    }
  }
  /**
   * Constructs a no op call for the canEdit()bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static canEdit(params: CallParams<OnChainVotingArgs['obj']['canEdit()bool'] | OnChainVotingArgs['tuple']['canEdit()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'canEdit()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the withdraw(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdraw(params: CallParams<OnChainVotingArgs['obj']['withdraw(uint64)void'] | OnChainVotingArgs['tuple']['withdraw(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the OnChainVoting smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class OnChainVotingFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `OnChainVotingFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new OnChainVotingClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new OnChainVotingClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the OnChainVoting smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: OnChainVotingDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? OnChainVotingParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (OnChainVotingCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new OnChainVotingClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OnChainVoting smart contract using the createApplication(uint64,uint64,string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<OnChainVotingArgs['obj']['createApplication(uint64,uint64,string)void'] | OnChainVotingArgs['tuple']['createApplication(uint64,uint64,string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(OnChainVotingParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OnChainVoting smart contract using the createApplication(uint64,uint64,string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<OnChainVotingArgs['obj']['createApplication(uint64,uint64,string)void'] | OnChainVotingArgs['tuple']['createApplication(uint64,uint64,string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(OnChainVotingParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OnChainVoting smart contract using an ABI method call using the createApplication(uint64,uint64,string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<OnChainVotingArgs['obj']['createApplication(uint64,uint64,string)void'] | OnChainVotingArgs['tuple']['createApplication(uint64,uint64,string)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(OnChainVotingParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | OnChainVotingReturns['createApplication(uint64,uint64,string)void']) }, appClient: new OnChainVotingClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the OnChainVoting smart contract
 */
export class OnChainVotingClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `OnChainVotingClient`
   *
   * @param appClient An `AppClient` instance which has been created with the OnChainVoting app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `OnChainVotingClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends OnChainVotingNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `OnChainVotingClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<OnChainVotingClient> {
    return new OnChainVotingClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `OnChainVotingClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<OnChainVotingClient> {
    return new OnChainVotingClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the OnChainVoting smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `addOption(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addOption: (params: CallParams<OnChainVotingArgs['obj']['addOption(uint64,string)void'] | OnChainVotingArgs['tuple']['addOption(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OnChainVotingParamsFactory.addOption(params))
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `removeOption(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeOption: (params: CallParams<OnChainVotingArgs['obj']['removeOption(uint64)void'] | OnChainVotingArgs['tuple']['removeOption(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OnChainVotingParamsFactory.removeOption(params))
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `removeVoterStorage(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeVoterStorage: (params: CallParams<OnChainVotingArgs['obj']['removeVoterStorage(address,uint64)void'] | OnChainVotingArgs['tuple']['removeVoterStorage(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OnChainVotingParamsFactory.removeVoterStorage(params))
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `vote(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    vote: (params: CallParams<OnChainVotingArgs['obj']['vote(uint64,uint64)void'] | OnChainVotingArgs['tuple']['vote(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OnChainVotingParamsFactory.vote(params))
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `addVoter(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addVoter: (params: CallParams<OnChainVotingArgs['obj']['addVoter(address,uint64)void'] | OnChainVotingArgs['tuple']['addVoter(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OnChainVotingParamsFactory.addVoter(params))
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `updateTimes(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateTimes: (params: CallParams<OnChainVotingArgs['obj']['updateTimes(uint64,uint64)void'] | OnChainVotingArgs['tuple']['updateTimes(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OnChainVotingParamsFactory.updateTimes(params))
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `canEdit()bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    canEdit: (params: CallParams<OnChainVotingArgs['obj']['canEdit()bool'] | OnChainVotingArgs['tuple']['canEdit()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OnChainVotingParamsFactory.canEdit(params))
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `withdraw(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdraw: (params: CallParams<OnChainVotingArgs['obj']['withdraw(uint64)void'] | OnChainVotingArgs['tuple']['withdraw(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OnChainVotingParamsFactory.withdraw(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the OnChainVoting smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `addOption(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addOption: (params: CallParams<OnChainVotingArgs['obj']['addOption(uint64,string)void'] | OnChainVotingArgs['tuple']['addOption(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OnChainVotingParamsFactory.addOption(params))
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `removeOption(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeOption: (params: CallParams<OnChainVotingArgs['obj']['removeOption(uint64)void'] | OnChainVotingArgs['tuple']['removeOption(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OnChainVotingParamsFactory.removeOption(params))
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `removeVoterStorage(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeVoterStorage: (params: CallParams<OnChainVotingArgs['obj']['removeVoterStorage(address,uint64)void'] | OnChainVotingArgs['tuple']['removeVoterStorage(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OnChainVotingParamsFactory.removeVoterStorage(params))
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `vote(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    vote: (params: CallParams<OnChainVotingArgs['obj']['vote(uint64,uint64)void'] | OnChainVotingArgs['tuple']['vote(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OnChainVotingParamsFactory.vote(params))
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `addVoter(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addVoter: (params: CallParams<OnChainVotingArgs['obj']['addVoter(address,uint64)void'] | OnChainVotingArgs['tuple']['addVoter(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OnChainVotingParamsFactory.addVoter(params))
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `updateTimes(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateTimes: (params: CallParams<OnChainVotingArgs['obj']['updateTimes(uint64,uint64)void'] | OnChainVotingArgs['tuple']['updateTimes(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OnChainVotingParamsFactory.updateTimes(params))
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `canEdit()bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    canEdit: (params: CallParams<OnChainVotingArgs['obj']['canEdit()bool'] | OnChainVotingArgs['tuple']['canEdit()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OnChainVotingParamsFactory.canEdit(params))
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `withdraw(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdraw: (params: CallParams<OnChainVotingArgs['obj']['withdraw(uint64)void'] | OnChainVotingArgs['tuple']['withdraw(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OnChainVotingParamsFactory.withdraw(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the OnChainVoting smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `addOption(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addOption: async (params: CallParams<OnChainVotingArgs['obj']['addOption(uint64,string)void'] | OnChainVotingArgs['tuple']['addOption(uint64,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OnChainVotingParamsFactory.addOption(params))
      return {...result, return: result.return as unknown as (undefined | OnChainVotingReturns['addOption(uint64,string)void'])}
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `removeOption(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeOption: async (params: CallParams<OnChainVotingArgs['obj']['removeOption(uint64)void'] | OnChainVotingArgs['tuple']['removeOption(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OnChainVotingParamsFactory.removeOption(params))
      return {...result, return: result.return as unknown as (undefined | OnChainVotingReturns['removeOption(uint64)void'])}
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `removeVoterStorage(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeVoterStorage: async (params: CallParams<OnChainVotingArgs['obj']['removeVoterStorage(address,uint64)void'] | OnChainVotingArgs['tuple']['removeVoterStorage(address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OnChainVotingParamsFactory.removeVoterStorage(params))
      return {...result, return: result.return as unknown as (undefined | OnChainVotingReturns['removeVoterStorage(address,uint64)void'])}
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `vote(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    vote: async (params: CallParams<OnChainVotingArgs['obj']['vote(uint64,uint64)void'] | OnChainVotingArgs['tuple']['vote(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OnChainVotingParamsFactory.vote(params))
      return {...result, return: result.return as unknown as (undefined | OnChainVotingReturns['vote(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `addVoter(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addVoter: async (params: CallParams<OnChainVotingArgs['obj']['addVoter(address,uint64)void'] | OnChainVotingArgs['tuple']['addVoter(address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OnChainVotingParamsFactory.addVoter(params))
      return {...result, return: result.return as unknown as (undefined | OnChainVotingReturns['addVoter(address,uint64)void'])}
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `updateTimes(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateTimes: async (params: CallParams<OnChainVotingArgs['obj']['updateTimes(uint64,uint64)void'] | OnChainVotingArgs['tuple']['updateTimes(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OnChainVotingParamsFactory.updateTimes(params))
      return {...result, return: result.return as unknown as (undefined | OnChainVotingReturns['updateTimes(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `canEdit()bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    canEdit: async (params: CallParams<OnChainVotingArgs['obj']['canEdit()bool'] | OnChainVotingArgs['tuple']['canEdit()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OnChainVotingParamsFactory.canEdit(params))
      return {...result, return: result.return as unknown as (undefined | OnChainVotingReturns['canEdit()bool'])}
    },

    /**
     * Makes a call to the OnChainVoting smart contract using the `withdraw(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdraw: async (params: CallParams<OnChainVotingArgs['obj']['withdraw(uint64)void'] | OnChainVotingArgs['tuple']['withdraw(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OnChainVotingParamsFactory.withdraw(params))
      return {...result, return: result.return as unknown as (undefined | OnChainVotingReturns['withdraw(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new OnChainVotingClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current OnChainVoting app
   */
  state = {
    /**
     * Methods to access global state for the current OnChainVoting app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          votingStart: result.votingStart,
          votingEnd: result.votingEnd,
          proposal: result.proposal,
        }
      },
      /**
       * Get the current value of the votingStart key in global state
       */
      votingStart: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("votingStart")) as bigint | undefined },
      /**
       * Get the current value of the votingEnd key in global state
       */
      votingEnd: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("votingEnd")) as bigint | undefined },
      /**
       * Get the current value of the proposal key in global state
       */
      proposal: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("proposal")) as string | undefined },
    },
    /**
     * Methods to access box state for the current OnChainVoting app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the voters map in box state
       */
      voters: {
        /**
         * Get all current values of the voters map in box state
         */
        getMap: async (): Promise<Map<VoterKey, bigint>> => { return (await this.appClient.state.box.getMap("voters")) as Map<VoterKey, bigint> },
        /**
         * Get a current value of the voters map by key from box state
         */
        value: async (key: VoterKey): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("voters", key) as bigint | undefined },
      },
      /**
       * Get values from the options map in box state
       */
      options: {
        /**
         * Get all current values of the options map in box state
         */
        getMap: async (): Promise<Map<bigint, OptionDetails>> => { return (await this.appClient.state.box.getMap("options")) as Map<bigint, OptionDetails> },
        /**
         * Get a current value of the options map by key from box state
         */
        value: async (key: bigint | number): Promise<OptionDetails | undefined> => { return await this.appClient.state.box.getMapValue("options", key) as OptionDetails | undefined },
      },
    },
  }

  public newGroup(): OnChainVotingComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a addOption(uint64,string)void method call against the OnChainVoting contract
       */
      addOption(params: CallParams<OnChainVotingArgs['obj']['addOption(uint64,string)void'] | OnChainVotingArgs['tuple']['addOption(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addOption(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a removeOption(uint64)void method call against the OnChainVoting contract
       */
      removeOption(params: CallParams<OnChainVotingArgs['obj']['removeOption(uint64)void'] | OnChainVotingArgs['tuple']['removeOption(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeOption(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a removeVoterStorage(address,uint64)void method call against the OnChainVoting contract
       */
      removeVoterStorage(params: CallParams<OnChainVotingArgs['obj']['removeVoterStorage(address,uint64)void'] | OnChainVotingArgs['tuple']['removeVoterStorage(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeVoterStorage(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a vote(uint64,uint64)void method call against the OnChainVoting contract
       */
      vote(params: CallParams<OnChainVotingArgs['obj']['vote(uint64,uint64)void'] | OnChainVotingArgs['tuple']['vote(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.vote(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addVoter(address,uint64)void method call against the OnChainVoting contract
       */
      addVoter(params: CallParams<OnChainVotingArgs['obj']['addVoter(address,uint64)void'] | OnChainVotingArgs['tuple']['addVoter(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addVoter(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateTimes(uint64,uint64)void method call against the OnChainVoting contract
       */
      updateTimes(params: CallParams<OnChainVotingArgs['obj']['updateTimes(uint64,uint64)void'] | OnChainVotingArgs['tuple']['updateTimes(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateTimes(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a canEdit()bool method call against the OnChainVoting contract
       */
      canEdit(params: CallParams<OnChainVotingArgs['obj']['canEdit()bool'] | OnChainVotingArgs['tuple']['canEdit()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.canEdit(params)))
        resultMappers.push((v) => client.decodeReturnValue('canEdit()bool', v))
        return this
      },
      /**
       * Add a withdraw(uint64)void method call against the OnChainVoting contract
       */
      withdraw(params: CallParams<OnChainVotingArgs['obj']['withdraw(uint64)void'] | OnChainVotingArgs['tuple']['withdraw(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdraw(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the OnChainVoting contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as OnChainVotingComposer
  }
}
export type OnChainVotingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the addOption(uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addOption(params?: CallParams<OnChainVotingArgs['obj']['addOption(uint64,string)void'] | OnChainVotingArgs['tuple']['addOption(uint64,string)void']>): OnChainVotingComposer<[...TReturns, OnChainVotingReturns['addOption(uint64,string)void'] | undefined]>

  /**
   * Calls the removeOption(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeOption(params?: CallParams<OnChainVotingArgs['obj']['removeOption(uint64)void'] | OnChainVotingArgs['tuple']['removeOption(uint64)void']>): OnChainVotingComposer<[...TReturns, OnChainVotingReturns['removeOption(uint64)void'] | undefined]>

  /**
   * Calls the removeVoterStorage(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeVoterStorage(params?: CallParams<OnChainVotingArgs['obj']['removeVoterStorage(address,uint64)void'] | OnChainVotingArgs['tuple']['removeVoterStorage(address,uint64)void']>): OnChainVotingComposer<[...TReturns, OnChainVotingReturns['removeVoterStorage(address,uint64)void'] | undefined]>

  /**
   * Calls the vote(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  vote(params?: CallParams<OnChainVotingArgs['obj']['vote(uint64,uint64)void'] | OnChainVotingArgs['tuple']['vote(uint64,uint64)void']>): OnChainVotingComposer<[...TReturns, OnChainVotingReturns['vote(uint64,uint64)void'] | undefined]>

  /**
   * Calls the addVoter(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addVoter(params?: CallParams<OnChainVotingArgs['obj']['addVoter(address,uint64)void'] | OnChainVotingArgs['tuple']['addVoter(address,uint64)void']>): OnChainVotingComposer<[...TReturns, OnChainVotingReturns['addVoter(address,uint64)void'] | undefined]>

  /**
   * Calls the updateTimes(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateTimes(params?: CallParams<OnChainVotingArgs['obj']['updateTimes(uint64,uint64)void'] | OnChainVotingArgs['tuple']['updateTimes(uint64,uint64)void']>): OnChainVotingComposer<[...TReturns, OnChainVotingReturns['updateTimes(uint64,uint64)void'] | undefined]>

  /**
   * Calls the canEdit()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  canEdit(params?: CallParams<OnChainVotingArgs['obj']['canEdit()bool'] | OnChainVotingArgs['tuple']['canEdit()bool']>): OnChainVotingComposer<[...TReturns, OnChainVotingReturns['canEdit()bool'] | undefined]>

  /**
   * Calls the withdraw(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(params?: CallParams<OnChainVotingArgs['obj']['withdraw(uint64)void'] | OnChainVotingArgs['tuple']['withdraw(uint64)void']>): OnChainVotingComposer<[...TReturns, OnChainVotingReturns['withdraw(uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the OnChainVoting smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): OnChainVotingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): OnChainVotingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<OnChainVotingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<OnChainVotingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<OnChainVotingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<OnChainVotingComposerResults<TReturns>>
}
export type OnChainVotingComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

